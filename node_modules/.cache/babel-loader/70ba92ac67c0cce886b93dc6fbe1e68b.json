{"ast":null,"code":"var _jsxFileName = \"/home/diego/projectos/nodos/frontend/src/components/home/Home.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js';\n\nfunction Home() {\n  document.title = \"Calculadora de Subredes\";\n  const agregar = [];\n  const [form, formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [columns, setColumns] = useState([]);\n\n  const colu = (e, og) => {\n    if (og == 0) {\n      setColumns(agregar);\n    } else {\n      let empezamos = 0;\n\n      while (og != empezamos) {\n        agregar.push({\n          title: \"Nodo \" + (empezamos + 1),\n          key: empezamos,\n          render: (porfavor, row, index) => {\n            return /*#__PURE__*/React.createElement(\"input\", {\n              type: \"number\",\n              name: \"Nodo\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 21,\n                columnNumber: 54\n              }\n            });\n          }\n        });\n        empezamos++;\n      }\n\n      setColumns(agregar);\n      console.log(agregar);\n    }\n  };\n\n  const numeros = e => {\n    const numeros = parseInt(form.nodos, 10);\n\n    if (numeros > 0) {\n      colu(e, numeros);\n      crearRow(numeros);\n    }\n  };\n\n  const crearRow = nod => {\n    let newData = [];\n\n    for (let i = 0; i < nod; i++) {\n      let fila = {};\n\n      for (let j = 0; j < nod; j++) {\n        let nombre = i + 1 + \",\" + (j + 1);\n        fila[nombre] = {\n          title: \"as\",\n          key: i + 1 + \",\" + j + 1\n        };\n        fila.key = j;\n      }\n\n      newData.push(fila);\n    }\n\n    setData(newData);\n  };\n\n  const camino = (t, v) => {\n    if (t[v] != 1) {\n      camino(t, t[v]);\n      console.log(\"- \", t[v]);\n    }\n  };\n\n  const Dijkstra = w => {\n    let l = new Array(w.length + 1),\n        t = new Array(w.length + 1),\n        r = new Array(w.length + 1),\n        min,\n        vmin;\n\n    for (let i = 2; i <= w.length; i++) {\n      l[i] = w[0][i - 1];\n      t[i] = 1;\n    }\n\n    for (let x = 1; x < w.length; x++) {\n      min = 999;\n\n      for (let i = 2; i <= w.length; i++) {\n        if (0 <= l[i] && l[i] <= min) {\n          min = l[i];\n          vmin = i;\n        }\n      }\n\n      for (let i = 2; i <= w.length; i++) {\n        if (l[vmin] + w[vmin - 1][i - 1] < l[i]) {\n          l[i] = l[vmin] + w[vmin - 1][i - 1];\n          l[i] = vmin;\n        }\n      }\n\n      r[vmin] = l[vmin];\n      l[vmin] = -1;\n    }\n\n    console.log(\"\\nCAMINOS MAS CORTOS\\n\");\n\n    for (let i = 2; i <= 15; i++) {\n      console.log(\"de 1 a \", i, \": 1\");\n      camino(t, i);\n      console.log(\"-\", i, \" cuesta \", r[i], \" unidades\\n\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"negro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"Bienvenido a calcular las subredes de una Direccion IP\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \" Cual direccion quieres usar? \"), /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Cuantos nodos usaras?\",\n    name: \"nodos\",\n    onChange: e => formedit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: e => numeros(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 16\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: e => {\n      console.log(form);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 16\n    }\n  }, \"Calcula\")), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/diego/projectos/nodos/frontend/src/components/home/Home.js"],"names":["React","useEffect","useState","Input","message","Table","Form","Button","InputNumber","useForm","Home","document","title","agregar","form","formedit","data","setData","columns","setColumns","colu","e","og","empezamos","push","key","render","porfavor","row","index","console","log","numeros","parseInt","nodos","crearRow","nod","newData","i","fila","j","nombre","camino","t","v","Dijkstra","w","l","Array","length","r","min","vmin","x"],"mappings":"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","sourcesContent":["import React, {useEffect, useState }from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js'\nfunction Home() {\n  document.title = \"Calculadora de Subredes\"\n  const agregar =[]\n  const [form,formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [columns, setColumns] = useState([]);\n\n  const colu = (e, og) =>  {\n    if(og == 0){\n      setColumns(agregar)\n    }\n    else {\n      let empezamos = 0\n      while(og != empezamos){\n        agregar.push({\n          title: \"Nodo \" + (empezamos+1),\n          key: empezamos,\n          render: (porfavor, row, index) => { return <input  type=\"number\" name=\"Nodo\"/ > }\n        })\n        empezamos++;\n      }\n      setColumns(agregar)\n      console.log(agregar)\n    }\n  }\n\n  const numeros = (e)=>{\n    const numeros = parseInt(form.nodos,10);\n    if(numeros > 0){\n      colu(e,numeros);\n      crearRow(numeros)\n    }\n  }\n\n  const crearRow = (nod) =>{\n    let newData = [];\n    for(let i = 0; i< nod; i++){\n      let fila = {};\n      for(let j = 0; j < nod; j++){\n        let nombre = i+1 + \",\" + (j+1);\n        fila[nombre] = {\n          title: \"as\",\n          key: i+1 + \",\" + j+1,\n        };\n        fila.key = j\n      }\n      newData.push(fila);\n    }\n    setData(newData);\n  }\n\n\n    const camino =  (t,v) =>{\n      if(t[v] != 1) {\n        camino(t,t[v]);\n        console.log(\"- \",t[v]);\n      }\n    }\n\n    const Dijkstra =  (w) =>\n    {    let l = new Array(w.length + 1 ),  t = new Array (w.length + 1),   r = new Array(w.length + 1),  min,  vmin;\n       for (let i = 2; i<=w.length ; i++){\n          l[i] = w[0][i-1];\n          t[i] = 1;\n        }\n       for (let x = 1; x < w.length ; x++)\n       {\tmin = 999;\n          for (let i = 2; i<= w.length ; i++){\n            if ( 0 <= l[i] && l[i] <= min)\n              {  min = l[i]; vmin = i; }\n           }\n         \tfor (let i=2; i<= w.length ; i++){\n  \t        if (l[vmin]+w[vmin-1][i-1] < l[i])\n               {\tl[i] = l[vmin]+w[vmin-1][i-1];\n  \t\t\t\t        l[i] = vmin; }\n           }\n          r[vmin] = l[vmin];\n          l[vmin] = -1;\n       }\n       console.log(  \"\\nCAMINOS MAS CORTOS\\n\");\n       for (let i = 2; i <= 15; i++)\n       { console.log( \"de 1 a \" ,i , \": 1\");\n         camino(t, i);\n         console.log( \"-\", i, \" cuesta \" , r[i], \" unidades\\n\");\n       }\n     }\n\n\n\n\n  return (\n    <div className=\"negro\">\n      <div className=\"todo\">\n        <h1>Bienvenido a calcular las subredes de una Direccion IP</h1>\n        <h2> Cual direccion quieres usar? </h2>\n        <Form layout = 'vertical'>\n          <Input placeholder = \"Cuantos nodos usaras?\" name=\"nodos\"\n                 onChange={e => formedit(e)}/>\n               <Button type=\"primary\" onClick = {e => numeros(e)}  >Submit</Button>\n               <Button type=\"primary\" onClick = {e => {console.log(form)}}>Calcula</Button>\n        </Form>\n        <Table columns={columns} dataSource={data} />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}