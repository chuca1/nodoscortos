{"ast":null,"code":"var _jsxFileName = \"/home/diego/projectos/nodos/frontend/src/components/home/Home.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js';\n\nfunction Home() {\n  document.title = \"Calculadora de Subredes\";\n  const [form, formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [valido, setValido] = useState();\n  const columns = [{\n    title: \"Numero de Subred\",\n    dataIndex: \"subred\",\n    key: 'subred'\n  }, {\n    title: \"Direccion de Subred\",\n    dataIndex: \"direccion\",\n    key: 'direccion'\n  }, {\n    title: \"Primer dir IP Host\",\n    dataIndex: \"pip\",\n    key: 'pip'\n  }, {\n    title: \"Ultima dir IP Host\",\n    dataIndex: \"uip\",\n    key: 'uip'\n  }, {\n    title: \"Dir Brodcast\",\n    dataIndex: \"brodcast\",\n    key: 'brodcast'\n  }, {\n    title: \"Mascara\",\n    dataIndex: \"mascara\",\n    key: 'mascara'\n  }];\n\n  const pushear = () => {\n    if (form.direccionIP && form.numSub) {\n      const direccion = form.direccionIP.split(\".\");\n      const numSub = parseInt(form.numSub, 10);\n      let isnum = /^\\d+$/.test(numSub);\n\n      if (!isnum) {\n        setValido(\"Ingresa un numero de subredes valido\");\n        setData([]);\n      }\n\n      if (direccion.length !== 4) {\n        setValido(\"Direccion no valida ingresa otra con el formato punteado\");\n        setData([]);\n      } else {\n        if (checarDireccion(direccion)) {\n          const clase = calcularClase(parseInt(direccion[0], 10), numSub);\n\n          if (cabe(numSub, clase)) {\n            const mascara = calcularMascara(clase, numSub);\n            let red = calcularDireccionRed(clase, direccion);\n            let nuevos = crearSubredes(red, numSub, mascara, clase);\n            setData(nuevos);\n          } else {\n            setValido(\"Eres ambicisioso pero no caben tantas subredes en tu direccion IP, prueba otra\");\n            setData([]);\n          }\n        }\n      }\n    } else {\n      setValido(\"Porfavor ingresa todos los campos  \");\n      setData([]);\n    }\n  };\n\n  const crearSubredes = (red, numSub, mascara, clase) => {\n    let nuevosDatos = [];\n\n    for (let i = 0; i < numSub; i++) {\n      red = calcularedActual(red, numSub, i);\n      const brodcastt = direccionBrodcast(red, clase, i + 1, numSub);\n      nuevosDatos.push({\n        key: i,\n        subred: i + 1,\n        direccion: red.join(\".\"),\n        pip: calcularPrimera(red, numSub, i).join(\".\"),\n        brodcast: brodcastt.join(\".\"),\n        uip: calcularUltima(brodcastt, clase).join(\".\"),\n        mascara: mascara.join(\".\")\n      });\n      red = calcularDireccionRed(clase, red);\n    }\n\n    return nuevosDatos;\n  };\n\n  const calcularedActual = (red, numSub, actual) => {\n    let nue = [];\n    red.map(e => nue.push(e));\n    let suma = actual * 2 ** (8 - calcularBitsSub(numSub));\n\n    for (let i = 0; i < 4; i++) {\n      if (nue[i] == 0) {\n        if (suma >= 255) {\n          nue[i] = suma - 255;\n          suma = suma - 255;\n        } else {\n          nue[i] = suma;\n          suma = 0;\n          i = 6;\n        }\n      }\n    }\n\n    return nue;\n  };\n\n  const calcularPrimera = (red, numSub, actual) => {\n    let nue = red;\n\n    for (let i = 3; i >= 0; i--) {\n      if (nue[i] < 255) {\n        nue[i] = nue[i] + 1;\n        i = -1;\n      }\n    }\n\n    return nue;\n  };\n\n  const calcularUltima = (direccion, clase) => {\n    let inicio = 0;\n    let nue = [];\n    direccion.map(e => {\n      nue.push(e);\n    });\n    if (clase == \"A\") inicio = 1;else if (clase == \"B\") inicio = 2;else if (clase == \"C\") inicio = 3;\n\n    for (let i = inicio; i < 4; i++) {\n      nue[i] = nue[i] - 1;\n      inicio = 4;\n    }\n\n    return nue;\n  };\n\n  const checarDireccion = direccion => {\n    for (let i = 0; i < direccion.length; i++) {\n      const valid = /^\\d+$/.test(direccion[i]);\n\n      if (!valid || direccion[i].length < 0 && direccion[i].length > 4 || direccion[i] > 255) {\n        setValido(\"Direccion no valida ingresa otra con el formato punteado\");\n        setData([]);\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const cabe = (numSub, clase) => {\n    if (clase === \"A\" && numSub <= 8388608) return true;else if (clase === \"B\" && numSub <= 32768) return true;else if (clase === \"C\" && numSub <= 128) return true;\n    return false;\n  };\n\n  const calcularClase = (primerO, numSub) => {\n    let clase;\n    const bits = calcularBitsSub(numSub);\n    if (primerO <= 127) clase = \"A\";else if (primerO > 127 && primerO <= 191) clase = \"B\";else if (primerO > 191 && primerO <= 223) clase = \"C\";else if (primerO > 223 && primerO <= 239) clase = \"D\";else if (primerO > 240 && primerO <= 255) clase = \"E\";else {\n      setValido(\"Red no valida ingresa otra\");\n      setData([]);\n      return \"F\";\n    }\n    setValido(\"Red Clase \" + clase + \" con \" + bits + \" bit para subnetting\");\n    return clase;\n  };\n\n  const calcularDireccionRed = (clase, direccionIP) => {\n    let red = direccionIP;\n\n    if (clase == \"A\") {\n      red[1] = 0;\n      red[2] = 0;\n      red[3] = 0;\n    } else if (clase == \"B\") {\n      red[2] = 0;\n      red[3] = 0;\n    } else if (clase == \"C\") red[3] = 0;\n\n    return red;\n  };\n\n  const calcularMascara = (clase, numSub) => {\n    const sub = calcularBitsSub(numSub);\n    if (clase == \"A\") return prestarAhost([255, 0, 0, 0], sub);else if (clase == \"B\") return prestarAhost([255, 255, 0, 0], sub);else if (clase == \"C\") return prestarAhost([255, 255, 255, 0], sub);else return prestarAhost([255, 255, 255, 255], sub);\n  };\n\n  const prestarAhost = (mascara, sub) => {\n    let suma = 0;\n\n    for (let i = 0; i < sub; i++) {\n      suma += 2 ** (7 - i);\n    }\n\n    for (let i = 0; i < 4; i++) {\n      if (mascara[i] != 255) {\n        if (suma > 255) {\n          mascara[i] = 255;\n          suma -= 255;\n        } else {\n          mascara[i] = suma;\n          suma = 0;\n          i = 4;\n        }\n      }\n    }\n\n    return mascara;\n  };\n\n  const calcularBitsSub = numSub => {\n    let numero = 1;\n\n    while (2 ** numero < numSub) numero++;\n\n    return numero;\n  };\n\n  const direccionBrodcast = (red, clase, actual, numSub) => {\n    let nue = [];\n    red.map(e => nue.push(e));\n    let suma = actual * 2 ** (8 - calcularBitsSub(numSub));\n    suma--;\n\n    for (let i = 3; i >= 0; i--) {\n      if (suma > 255) {\n        nue[i] = suma - 255;\n        suma = suma - 255;\n      } else {\n        nue[i] = suma;\n        i = -1;\n      }\n    }\n\n    return nue;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"negro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }\n  }, \"Bienvenido a calcular las subredes de una Direccion IP\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }, \" Cual direccion quieres usar? \"), /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }\n  }, \" Direccion IP \"), /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Ingresa tu direccion IP\",\n    name: \"direccionIP\",\n    onChange: e => formedit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 11\n    }\n  }, \" Numero de Subredes \"), /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Cuantas subredes deseas\",\n    name: \"numSub\",\n    type: \"number\",\n    onChange: e => formedit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: pushear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 11\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }\n  }, valido), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/diego/projectos/nodos/frontend/src/components/home/Home.js"],"names":["React","useEffect","useState","Input","message","Table","Form","Button","InputNumber","useForm","Home","document","title","form","formedit","data","setData","valido","setValido","columns","dataIndex","key","pushear","direccionIP","numSub","direccion","split","parseInt","isnum","test","length","checarDireccion","clase","calcularClase","cabe","mascara","calcularMascara","red","calcularDireccionRed","nuevos","crearSubredes","nuevosDatos","i","calcularedActual","brodcastt","direccionBrodcast","push","subred","join","pip","calcularPrimera","brodcast","uip","calcularUltima","actual","nue","map","e","suma","calcularBitsSub","inicio","valid","primerO","bits","sub","prestarAhost","numero"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,KAAzB,EAAgCC,IAAhC,EAAsCC,MAAtC,EAA8CC,WAA9C,QAAiE,MAAjE;AACA,OAAOC,OAAP,MAAoB,uBAApB;;AACA,SAASC,IAAT,GAAgB;AACdC,EAAAA,QAAQ,CAACC,KAAT,GAAiB,yBAAjB;AACA,QAAM,CAACC,IAAD,EAAMC,QAAN,IAAkBL,OAAO,EAA/B;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,EAApC;AACA,QAAMiB,OAAO,GAAG,CACd;AACEP,IAAAA,KAAK,EAAE,kBADT;AAEEQ,IAAAA,SAAS,EAAE,QAFb;AAGEC,IAAAA,GAAG,EAAE;AAHP,GADc,EAMd;AACET,IAAAA,KAAK,EAAE,qBADT;AAEEQ,IAAAA,SAAS,EAAE,WAFb;AAGEC,IAAAA,GAAG,EAAE;AAHP,GANc,EAWd;AACET,IAAAA,KAAK,EAAE,oBADT;AAEEQ,IAAAA,SAAS,EAAE,KAFb;AAGEC,IAAAA,GAAG,EAAE;AAHP,GAXc,EAgBd;AACET,IAAAA,KAAK,EAAE,oBADT;AAEEQ,IAAAA,SAAS,EAAE,KAFb;AAGEC,IAAAA,GAAG,EAAE;AAHP,GAhBc,EAqBd;AACET,IAAAA,KAAK,EAAE,cADT;AAEEQ,IAAAA,SAAS,EAAE,UAFb;AAGEC,IAAAA,GAAG,EAAE;AAHP,GArBc,EA0Bd;AACET,IAAAA,KAAK,EAAE,SADT;AAEEQ,IAAAA,SAAS,EAAE,SAFb;AAGEC,IAAAA,GAAG,EAAE;AAHP,GA1Bc,CAAhB;;AAmCA,QAAMC,OAAO,GAAG,MAAK;AACnB,QAAGT,IAAI,CAACU,WAAL,IAAoBV,IAAI,CAACW,MAA5B,EAAmC;AACjC,YAAMC,SAAS,GAAGZ,IAAI,CAACU,WAAL,CAAiBG,KAAjB,CAAuB,GAAvB,CAAlB;AACA,YAAMF,MAAM,GAAGG,QAAQ,CAACd,IAAI,CAACW,MAAN,EAAa,EAAb,CAAvB;AACA,UAAII,KAAK,GAAG,QAAQC,IAAR,CAAaL,MAAb,CAAZ;;AACA,UAAG,CAACI,KAAJ,EAAU;AACRV,QAAAA,SAAS,CAAC,sCAAD,CAAT;AACAF,QAAAA,OAAO,CAAC,EAAD,CAAP;AACD;;AACD,UAAGS,SAAS,CAACK,MAAV,KAAqB,CAAxB,EAA0B;AACxBZ,QAAAA,SAAS,CAAC,0DAAD,CAAT;AACAF,QAAAA,OAAO,CAAC,EAAD,CAAP;AACD,OAHD,MAII;AACF,YAAGe,eAAe,CAACN,SAAD,CAAlB,EAA8B;AAC5B,gBAAMO,KAAK,GAAGC,aAAa,CAACN,QAAQ,CAACF,SAAS,CAAC,CAAD,CAAV,EAAc,EAAd,CAAT,EAA2BD,MAA3B,CAA3B;;AACA,cAAGU,IAAI,CAACV,MAAD,EAAQQ,KAAR,CAAP,EAAsB;AACpB,kBAAMG,OAAO,GAAGC,eAAe,CAACJ,KAAD,EAAOR,MAAP,CAA/B;AACA,gBAAIa,GAAG,GAAGC,oBAAoB,CAACN,KAAD,EAAOP,SAAP,CAA9B;AAEA,gBAAIc,MAAM,GAAGC,aAAa,CAACH,GAAD,EAAKb,MAAL,EAAYW,OAAZ,EAAoBH,KAApB,CAA1B;AAEAhB,YAAAA,OAAO,CAACuB,MAAD,CAAP;AACD,WAPD,MAOK;AACHrB,YAAAA,SAAS,CAAC,gFAAD,CAAT;AACAF,YAAAA,OAAO,CAAC,EAAD,CAAP;AACD;AACF;AACF;AAEF,KA7BD,MA6BK;AACHE,MAAAA,SAAS,CAAC,qCAAD,CAAT;AACAF,MAAAA,OAAO,CAAC,EAAD,CAAP;AACD;AACF,GAlCD;;AAoCA,QAAMwB,aAAa,GAAG,CAACH,GAAD,EAAKb,MAAL,EAAYW,OAAZ,EAAoBH,KAApB,KAA6B;AACjD,QAAIS,WAAW,GAAG,EAAlB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGlB,MAAnB,EAA2BkB,CAAC,EAA5B,EAA+B;AAC3BL,MAAAA,GAAG,GAAGM,gBAAgB,CAACN,GAAD,EAAKb,MAAL,EAAYkB,CAAZ,CAAtB;AACA,YAAME,SAAS,GAAGC,iBAAiB,CAACR,GAAD,EAAKL,KAAL,EAAWU,CAAC,GAAC,CAAb,EAAelB,MAAf,CAAnC;AACAiB,MAAAA,WAAW,CAACK,IAAZ,CAAiB;AACfzB,QAAAA,GAAG,EAAEqB,CADU;AAEfK,QAAAA,MAAM,EAAEL,CAAC,GAAC,CAFK;AAGfjB,QAAAA,SAAS,EAAEY,GAAG,CAACW,IAAJ,CAAS,GAAT,CAHI;AAIfC,QAAAA,GAAG,EAACC,eAAe,CAACb,GAAD,EAAKb,MAAL,EAAYkB,CAAZ,CAAf,CAA8BM,IAA9B,CAAmC,GAAnC,CAJW;AAKfG,QAAAA,QAAQ,EAACP,SAAS,CAACI,IAAV,CAAe,GAAf,CALM;AAMfI,QAAAA,GAAG,EAAEC,cAAc,CAACT,SAAD,EAAWZ,KAAX,CAAd,CAAgCgB,IAAhC,CAAqC,GAArC,CANU;AAOfb,QAAAA,OAAO,EAACA,OAAO,CAACa,IAAR,CAAa,GAAb;AAPO,OAAjB;AASAX,MAAAA,GAAG,GAAGC,oBAAoB,CAACN,KAAD,EAAOK,GAAP,CAA1B;AACH;;AACD,WAAOI,WAAP;AACD,GAjBD;;AAmBA,QAAME,gBAAgB,GAAG,CAACN,GAAD,EAAKb,MAAL,EAAY8B,MAAZ,KAAsB;AAC7C,QAAIC,GAAG,GAAG,EAAV;AACAlB,IAAAA,GAAG,CAACmB,GAAJ,CAAQC,CAAC,IAAGF,GAAG,CAACT,IAAJ,CAASW,CAAT,CAAZ;AACA,QAAIC,IAAI,GAAGJ,MAAM,GAAI,MAAM,IAAEK,eAAe,CAACnC,MAAD,CAAvB,CAArB;;AACA,SAAI,IAAIkB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACxB,UAAGa,GAAG,CAACb,CAAD,CAAH,IAAU,CAAb,EAAe;AACb,YAAGgB,IAAI,IAAI,GAAX,EAAe;AACbH,UAAAA,GAAG,CAACb,CAAD,CAAH,GAASgB,IAAI,GAAG,GAAhB;AACAA,UAAAA,IAAI,GAAGA,IAAI,GAAG,GAAd;AACD,SAHD,MAII;AACFH,UAAAA,GAAG,CAACb,CAAD,CAAH,GAASgB,IAAT;AACAA,UAAAA,IAAI,GAAG,CAAP;AACAhB,UAAAA,CAAC,GAAC,CAAF;AACD;AACF;AACF;;AACD,WAAOa,GAAP;AACD,GAlBD;;AAoBA,QAAML,eAAe,GAAG,CAACb,GAAD,EAAKb,MAAL,EAAY8B,MAAZ,KAAsB;AAC5C,QAAIC,GAAG,GAAGlB,GAAV;;AACA,SAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,CAApB,EAAuBA,CAAC,EAAxB,EAA2B;AACzB,UAAGa,GAAG,CAACb,CAAD,CAAH,GAAS,GAAZ,EAAgB;AACda,QAAAA,GAAG,CAACb,CAAD,CAAH,GAASa,GAAG,CAACb,CAAD,CAAH,GAAO,CAAhB;AACAA,QAAAA,CAAC,GAAC,CAAC,CAAH;AACD;AACF;;AACD,WAAOa,GAAP;AACD,GATD;;AAWA,QAAMF,cAAc,GAAG,CAAC5B,SAAD,EAAWO,KAAX,KAAoB;AACzC,QAAI4B,MAAM,GAAG,CAAb;AACA,QAAIL,GAAG,GAAG,EAAV;AACA9B,IAAAA,SAAS,CAAC+B,GAAV,CAAeC,CAAD,IAAK;AAACF,MAAAA,GAAG,CAACT,IAAJ,CAASW,CAAT;AAAY,KAAhC;AACA,QAAGzB,KAAK,IAAG,GAAX,EAAgB4B,MAAM,GAAG,CAAT,CAAhB,KACK,IAAG5B,KAAK,IAAG,GAAX,EAAgB4B,MAAM,GAAG,CAAT,CAAhB,KACA,IAAG5B,KAAK,IAAG,GAAX,EAAgB4B,MAAM,GAAG,CAAT;;AACrB,SAAI,IAAIlB,CAAC,GAAGkB,MAAZ,EAAoBlB,CAAC,GAAC,CAAtB,EAAyBA,CAAC,EAA1B,EAA6B;AAC3Ba,MAAAA,GAAG,CAACb,CAAD,CAAH,GAASa,GAAG,CAACb,CAAD,CAAH,GAAO,CAAhB;AACAkB,MAAAA,MAAM,GAAE,CAAR;AACD;;AACD,WAAOL,GAAP;AACD,GAZD;;AAcA,QAAMxB,eAAe,GAAIN,SAAD,IAAc;AACpC,SAAI,IAAIiB,CAAC,GAAE,CAAX,EAAeA,CAAC,GAACjB,SAAS,CAACK,MAA3B,EAAmCY,CAAC,EAApC,EAAuC;AACrC,YAAMmB,KAAK,GAAG,QAAQhC,IAAR,CAAaJ,SAAS,CAACiB,CAAD,CAAtB,CAAd;;AACA,UAAG,CAACmB,KAAD,IAAWpC,SAAS,CAACiB,CAAD,CAAT,CAAaZ,MAAb,GAAsB,CAAtB,IAA2BL,SAAS,CAACiB,CAAD,CAAT,CAAaZ,MAAb,GAAsB,CAA5D,IAAkEL,SAAS,CAACiB,CAAD,CAAT,GAAa,GAAlF,EAAsF;AACpFxB,QAAAA,SAAS,CAAC,0DAAD,CAAT;AACAF,QAAAA,OAAO,CAAC,EAAD,CAAP;AACA,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAVD;;AAYA,QAAMkB,IAAI,GAAG,CAACV,MAAD,EAAQQ,KAAR,KAAiB;AAC5B,QAAGA,KAAK,KAAI,GAAT,IAAgBR,MAAM,IAAI,OAA7B,EAAsC,OAAO,IAAP,CAAtC,KACK,IAAGQ,KAAK,KAAI,GAAT,IAAgBR,MAAM,IAAI,KAA7B,EAAoC,OAAO,IAAP,CAApC,KACA,IAAGQ,KAAK,KAAI,GAAT,IAAgBR,MAAM,IAAI,GAA7B,EAAkC,OAAO,IAAP;AACvC,WAAO,KAAP;AACD,GALD;;AAOA,QAAMS,aAAa,GAAG,CAAC6B,OAAD,EAAUtC,MAAV,KAAoB;AACxC,QAAIQ,KAAJ;AACA,UAAM+B,IAAI,GAAGJ,eAAe,CAACnC,MAAD,CAA5B;AACA,QAAGsC,OAAO,IAAE,GAAZ,EAAiB9B,KAAK,GAAG,GAAR,CAAjB,KACK,IAAG8B,OAAO,GAAG,GAAV,IAAiBA,OAAO,IAAI,GAA/B,EAAmC9B,KAAK,GAAG,GAAR,CAAnC,KACA,IAAG8B,OAAO,GAAG,GAAV,IAAiBA,OAAO,IAAI,GAA/B,EAAoC9B,KAAK,GAAG,GAAR,CAApC,KACA,IAAG8B,OAAO,GAAG,GAAV,IAAiBA,OAAO,IAAI,GAA/B,EAAoC9B,KAAK,GAAG,GAAR,CAApC,KACA,IAAG8B,OAAO,GAAG,GAAV,IAAiBA,OAAO,IAAI,GAA/B,EAAoC9B,KAAK,GAAG,GAAR,CAApC,KACA;AACHd,MAAAA,SAAS,CAAC,4BAAD,CAAT;AACAF,MAAAA,OAAO,CAAC,EAAD,CAAP;AACA,aAAO,GAAP;AACD;AACDE,IAAAA,SAAS,CAAC,eAAcc,KAAd,GAAqB,OAArB,GAA+B+B,IAA/B,GAAsC,sBAAvC,CAAT;AACA,WAAO/B,KAAP;AACD,GAfD;;AAiBA,QAAMM,oBAAoB,GAAG,CAACN,KAAD,EAAQT,WAAR,KAAwB;AACnD,QAAIc,GAAG,GAAGd,WAAV;;AACA,QAAGS,KAAK,IAAI,GAAZ,EAAgB;AACdK,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACD,KAJD,MAKK,IAAGL,KAAK,IAAG,GAAX,EAAe;AAClBK,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACAA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACD,KAHI,MAIA,IAAGL,KAAK,IAAG,GAAX,EAAgBK,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;;AACrB,WAAOA,GAAP;AACD,GAbD;;AAeA,QAAMD,eAAe,GAAG,CAACJ,KAAD,EAAQR,MAAR,KAAkB;AACxC,UAAMwC,GAAG,GAAGL,eAAe,CAACnC,MAAD,CAA3B;AACA,QAAGQ,KAAK,IAAI,GAAZ,EAAiB,OAAOiC,YAAY,CAAC,CAAC,GAAD,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAD,EAAaD,GAAb,CAAnB,CAAjB,KACK,IAAGhC,KAAK,IAAI,GAAZ,EAAiB,OAAOiC,YAAY,CAAC,CAAC,GAAD,EAAK,GAAL,EAAS,CAAT,EAAW,CAAX,CAAD,EAAeD,GAAf,CAAnB,CAAjB,KACA,IAAGhC,KAAK,IAAG,GAAX,EAAgB,OAAOiC,YAAY,CAAC,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,CAAb,CAAD,EAAiBD,GAAjB,CAAnB,CAAhB,KACA,OAAOC,YAAY,CAAC,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,CAAD,EAAmBD,GAAnB,CAAnB;AACN,GAND;;AAQA,QAAMC,YAAY,GAAG,CAAC9B,OAAD,EAAU6B,GAAV,KAAiB;AACpC,QAAIN,IAAI,GAAG,CAAX;;AACA,SAAI,IAAIhB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGsB,GAAnB,EAAwBtB,CAAC,EAAzB,EAA6B;AAC3BgB,MAAAA,IAAI,IAAI,MAAI,IAAEhB,CAAN,CAAR;AACD;;AACD,SAAI,IAAIA,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAC,CAAjB,EAAmBA,CAAC,EAApB,EAAuB;AACrB,UAAGP,OAAO,CAACO,CAAD,CAAP,IAAc,GAAjB,EAAqB;AACnB,YAAGgB,IAAI,GAAC,GAAR,EAAY;AACVvB,UAAAA,OAAO,CAACO,CAAD,CAAP,GAAa,GAAb;AACAgB,UAAAA,IAAI,IAAI,GAAR;AACD,SAHD,MAGK;AACHvB,UAAAA,OAAO,CAACO,CAAD,CAAP,GAAagB,IAAb;AACAA,UAAAA,IAAI,GAAG,CAAP;AACAhB,UAAAA,CAAC,GAAG,CAAJ;AACD;AACF;AACF;;AACD,WAAOP,OAAP;AACD,GAlBD;;AAqBA,QAAMwB,eAAe,GAAInC,MAAD,IAAW;AACjC,QAAI0C,MAAM,GAAG,CAAb;;AACA,WAAM,KAAGA,MAAH,GAAY1C,MAAlB,EAA0B0C,MAAM;;AAChC,WAAOA,MAAP;AACD,GAJD;;AAMA,QAAMrB,iBAAiB,GAAG,CAACR,GAAD,EAAKL,KAAL,EAAYsB,MAAZ,EAAoB9B,MAApB,KAA8B;AACtD,QAAI+B,GAAG,GAAG,EAAV;AACAlB,IAAAA,GAAG,CAACmB,GAAJ,CAAQC,CAAC,IAAGF,GAAG,CAACT,IAAJ,CAASW,CAAT,CAAZ;AACA,QAAIC,IAAI,GAAGJ,MAAM,GAAI,MAAM,IAAEK,eAAe,CAACnC,MAAD,CAAvB,CAArB;AACAkC,IAAAA,IAAI;;AACJ,SAAI,IAAIhB,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,CAApB,EAAuBA,CAAC,EAAxB,EAA2B;AACzB,UAAGgB,IAAI,GAAG,GAAV,EAAc;AACZH,QAAAA,GAAG,CAACb,CAAD,CAAH,GAASgB,IAAI,GAAG,GAAhB;AACAA,QAAAA,IAAI,GAAGA,IAAI,GAAG,GAAd;AACD,OAHD,MAII;AACFH,QAAAA,GAAG,CAACb,CAAD,CAAH,GAASgB,IAAT;AACAhB,QAAAA,CAAC,GAAC,CAAC,CAAH;AACD;AACF;;AACD,WAAOa,GAAP;AACD,GAhBD;;AAkBA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAFF,eAGE,oBAAC,IAAD;AAAM,IAAA,MAAM,EAAG,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAG,yBAArB;AAA+C,IAAA,IAAI,EAAC,aAApD;AACQ,IAAA,QAAQ,EAAEE,CAAC,IAAI3C,QAAQ,CAAC2C,CAAD,CAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAJF,eAKE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAG,yBAArB;AAA+C,IAAA,IAAI,EAAC,QAApD;AAA6D,IAAA,IAAI,EAAC,QAAlE;AACQ,IAAA,QAAQ,EAAIA,CAAC,IAAI3C,QAAQ,CAAC2C,CAAD,CADjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,eAOE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,OAAO,EAAEnC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,CAHF,eAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,MAAL,CAZF,eAaE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAEE,OAAhB;AAAyB,IAAA,UAAU,EAAEJ,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CADF,CADF;AAmBD;;AAED,eAAeL,IAAf","sourcesContent":["import React, {useEffect, useState }from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js'\nfunction Home() {\n  document.title = \"Calculadora de Subredes\"\n  const [form,formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [valido, setValido] = useState();\n  const columns = [\n    {\n      title: \"Numero de Subred\",\n      dataIndex: \"subred\",\n      key: 'subred',\n    },\n    {\n      title: \"Direccion de Subred\",\n      dataIndex: \"direccion\",\n      key: 'direccion',\n    },\n    {\n      title: \"Primer dir IP Host\",\n      dataIndex: \"pip\",\n      key: 'pip',\n    },\n    {\n      title: \"Ultima dir IP Host\",\n      dataIndex: \"uip\",\n      key: 'uip',\n    },\n    {\n      title: \"Dir Brodcast\",\n      dataIndex: \"brodcast\",\n      key: 'brodcast',\n    },\n    {\n      title: \"Mascara\",\n      dataIndex: \"mascara\",\n      key: 'mascara',\n    }\n\n  ]\n\n\n  const pushear = () =>{\n    if(form.direccionIP && form.numSub){\n      const direccion = form.direccionIP.split(\".\");\n      const numSub = parseInt(form.numSub,10);\n      let isnum = /^\\d+$/.test(numSub);\n      if(!isnum){\n        setValido(\"Ingresa un numero de subredes valido\");\n        setData([]);\n      }\n      if(direccion.length !== 4){\n        setValido(\"Direccion no valida ingresa otra con el formato punteado\");\n        setData([]);\n      }\n      else{\n        if(checarDireccion(direccion)){\n          const clase = calcularClase(parseInt(direccion[0],10),numSub);\n          if(cabe(numSub,clase)){\n            const mascara = calcularMascara(clase,numSub);\n            let red = calcularDireccionRed(clase,direccion);\n\n            let nuevos = crearSubredes(red,numSub,mascara,clase);\n\n            setData(nuevos);\n          }else{\n            setValido(\"Eres ambicisioso pero no caben tantas subredes en tu direccion IP, prueba otra\");\n            setData([]);\n          }\n        }\n      }\n\n    }else{\n      setValido(\"Porfavor ingresa todos los campos  \")\n      setData([]);\n    }\n  }\n\n  const crearSubredes = (red,numSub,mascara,clase) =>{\n    let nuevosDatos = [];\n    for(let i = 0; i < numSub; i++){\n        red = calcularedActual(red,numSub,i);\n        const brodcastt = direccionBrodcast(red,clase,i+1,numSub);\n        nuevosDatos.push({\n          key: i,\n          subred: i+1,\n          direccion: red.join(\".\"),\n          pip:calcularPrimera(red,numSub,i).join(\".\"),\n          brodcast:brodcastt.join(\".\"),\n          uip: calcularUltima(brodcastt,clase).join(\".\"),\n          mascara:mascara.join(\".\")\n        })\n        red = calcularDireccionRed(clase,red);\n    }\n    return nuevosDatos;\n  }\n\n  const calcularedActual = (red,numSub,actual) =>{\n    let nue = [];\n    red.map(e=> nue.push(e));\n    let suma = actual * (2 ** (8-calcularBitsSub(numSub)));\n    for(let i = 0; i < 4; i++){\n      if(nue[i] == 0){\n        if(suma >= 255){\n          nue[i] = suma - 255;\n          suma = suma - 255;\n        }\n        else{\n          nue[i] = suma;\n          suma = 0;\n          i=6;\n        }\n      }\n    }\n    return nue;\n  }\n\n  const calcularPrimera = (red,numSub,actual) =>{\n    let nue = red\n    for(let i = 3; i >= 0; i--){\n      if(nue[i] < 255){\n        nue[i] = nue[i]+1;\n        i=-1;\n      }\n    }\n    return nue;\n  }\n\n  const calcularUltima = (direccion,clase) =>{\n    let inicio = 0;\n    let nue = [];\n    direccion.map((e)=>{nue.push(e)})\n    if(clase ==\"A\") inicio = 1;\n    else if(clase ==\"B\") inicio = 2;\n    else if(clase ==\"C\") inicio = 3;\n    for(let i = inicio; i<4; i++){\n      nue[i] = nue[i]-1;\n      inicio= 4;\n    }\n    return nue;\n  }\n\n  const checarDireccion = (direccion) =>{\n    for(let i =0 ; i<direccion.length; i++){\n      const valid = /^\\d+$/.test(direccion[i]);\n      if(!valid || (direccion[i].length < 0 && direccion[i].length > 4) || direccion[i]>255){\n        setValido(\"Direccion no valida ingresa otra con el formato punteado\");\n        setData([]);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const cabe = (numSub,clase) =>{\n    if(clase ===\"A\" && numSub <= 8388608) return true\n    else if(clase ===\"B\" && numSub <= 32768) return true\n    else if(clase ===\"C\" && numSub <= 128) return true\n    return false;\n  }\n\n  const calcularClase = (primerO, numSub) =>{\n    let clase;\n    const bits = calcularBitsSub(numSub);\n    if(primerO<=127) clase = \"A\"\n    else if(primerO > 127 && primerO <= 191)clase = \"B\"\n    else if(primerO > 191 && primerO <= 223) clase = \"C\"\n    else if(primerO > 223 && primerO <= 239) clase = \"D\"\n    else if(primerO > 240 && primerO <= 255) clase = \"E\"\n    else {\n      setValido(\"Red no valida ingresa otra\");\n      setData([]);\n      return \"F\"\n    }\n    setValido(\"Red Clase \" +clase+ \" con \" + bits + \" bit para subnetting\");\n    return clase;\n  }\n\n  const calcularDireccionRed = (clase, direccionIP) => {\n    let red = direccionIP;\n    if(clase == \"A\"){\n      red[1] = 0\n      red[2] = 0\n      red[3] = 0\n    }\n    else if(clase ==\"B\"){\n      red[2] = 0\n      red[3] = 0\n    }\n    else if(clase ==\"C\") red[3] = 0;\n    return red\n  }\n\n  const calcularMascara = (clase, numSub) =>{\n    const sub = calcularBitsSub(numSub);\n    if(clase == \"A\") return prestarAhost([255,0,0,0],sub);\n    else if(clase == \"B\") return prestarAhost([255,255,0,0],sub);\n    else if(clase ==\"C\") return prestarAhost([255,255,255,0],sub);\n    else return prestarAhost([255,255,255,255],sub);\n  }\n\n  const prestarAhost = (mascara, sub) =>{\n    let suma = 0;\n    for(let i = 0; i < sub; i++ ){\n      suma += 2**(7-i);\n    }\n    for(let i = 0; i<4;i++){\n      if(mascara[i] != 255){\n        if(suma>255){\n          mascara[i] = 255;\n          suma -= 255;\n        }else{\n          mascara[i] = suma;\n          suma = 0;\n          i = 4;\n        }\n      }\n    }\n    return mascara;\n  }\n\n\n  const calcularBitsSub = (numSub) =>{\n    let numero = 1;\n    while(2**numero < numSub) numero++;\n    return numero;\n  }\n\n  const direccionBrodcast = (red,clase, actual, numSub) =>{\n    let nue = [];\n    red.map(e=> nue.push(e));\n    let suma = actual * (2 ** (8-calcularBitsSub(numSub)));\n    suma--;\n    for(let i = 3; i >= 0; i--){\n      if(suma > 255){\n        nue[i] = suma - 255;\n        suma = suma - 255;\n      }\n      else{\n        nue[i] = suma;\n        i=-1;\n      }\n    }\n    return nue;\n  }\n\n  return (\n    <div className=\"negro\">\n      <div className=\"todo\">\n        <h1>Bienvenido a calcular las subredes de una Direccion IP</h1>\n        <h2> Cual direccion quieres usar? </h2>\n        <Form layout = 'vertical'>\n          <label> Direccion IP </label>\n          <Input placeholder = \"Ingresa tu direccion IP\" name=\"direccionIP\"\n                  onChange={e => formedit(e)}/>\n          <label> Numero de Subredes </label>\n          <Input placeholder = \"Cuantas subredes deseas\" name=\"numSub\" type=\"number\"\n                  onChange = {e => formedit(e)}/>\n          <Button type=\"primary\" onClick={pushear} >Submit</Button>\n        </Form>\n        <h2>{valido}</h2>\n        <Table columns={columns} dataSource={data} />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}