{"ast":null,"code":"var _jsxFileName = \"/home/diego/projectos/nodos/frontend/src/components/home/Home.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js';\n\nfunction Home() {\n  document.title = \"Calculadora de Subredes\";\n  const agregar = [];\n  const [form, formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [columns, setColumns] = useState([]);\n\n  const colu = (e, og) => {\n    if (og == 0) {\n      setColumns(agregar);\n    } else {\n      let empezamos = 0;\n\n      while (og != empezamos) {\n        agregar.push({\n          title: \"Nodo \" + (empezamos + 1),\n          dataIndex: \"porfavor\",\n          key: 'ya',\n          render: (porfavor, row, index) => {\n            return /*#__PURE__*/React.createElement(\"input\", {\n              type: \"number\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 24,\n                columnNumber: 54\n              }\n            });\n          }\n        });\n        empezamos++;\n      }\n\n      setColumns(agregar);\n    }\n  };\n\n  const numeros = e => {\n    const numeros = parseInt(form.nodos, 10);\n\n    if (numeros > 0) {\n      colu(e, numeros);\n      crearRow(numeros);\n    }\n  };\n\n  const crearRow = nod => {\n    let newData = [];\n\n    for (let i = 0; i < nod; i++) {\n      let fila = {};\n\n      for (let j = 0; j < nod; j++) {\n        fila[\"porfavor\"] = \"3\";\n      }\n\n      newData.push(fila);\n      console.log(newData);\n    }\n\n    setData(newData);\n  };\n\n  const camino = (t, v) => {\n    if (t[v] != 1) {\n      camino(t, t[v]);\n      console.log(\"- \", t[v]);\n    }\n  };\n\n  const Dijkstra = w => {\n    let l = new Array(w.length + 1),\n        t = new Array(w.length + 1),\n        r = new Array(w.length + 1),\n        min,\n        vmin;\n\n    for (let i = 2; i <= w.length; i++) {\n      l[i] = w[0][i - 1];\n      t[i] = 1;\n    }\n\n    for (let i = 1; i < w.length; i++) {\n      min = 999;\n\n      for (let j = 2; j <= w.length; j++) {\n        if (0 <= l[j] && l[j] <= min) {\n          min = l[j];\n          vmin = j;\n        }\n      }\n\n      for (let j = 2; j <= w.length; j++) {\n        if (l[vmin] + w[vmin - 1][j - 1] < l[j]) {\n          l[i] = l[vmin] + w[vmin - 1][j - 1];\n          t[i] = vmin;\n        }\n      }\n\n      r[vmin] = l[vmin];\n      l[vmin] = -1;\n    }\n\n    console.log(\"\\nCAMINOS MAS CORTOS\\n\"); // para desplegar todos los caminos resultantes a partir del nodo 1\n\n    for (let i = 2; i <= w.length; i++) {\n      console.log(\"de 1 a \", i, \": 1\");\n      camino(t, i);\n      console.log(\"-\", i, \" cuesta \", r[i], \" unidades\\n\");\n    }\n  };\n\n  let anchos = [[0, 2, 3, 2, 999, 4, 5, 2, 9, 999, 3, 2, 999, 5, 6], [2, 0, 2, 8, 999, 5, 999, 4, 6, 999, 8, 2, 3, 4, 1], [3, 2, 0, 1, 6, 3, 999, 5, 6, 1, 999, 4, 2, 7, 999], [2, 8, 1, 0, 1, 6, 1, 3, 3, 3, 999, 8, 1, 4, 999], [999, 999, 6, 1, 0, 999, 1, 4, 1, 999, 3, 1, 999, 1, 999], [4, 5, 3, 6, 999, 0, 999, 7, 1, 7, 6, 999, 2, 7, 4], [5, 999, 999, 1, 1, 999, 0, 4, 1, 4, 7, 4, 999, 1, 5], [2, 4, 5, 3, 4, 7, 4, 0, 2, 999, 4, 999, 1, 4, 1], [9, 6, 6, 3, 1, 1, 1, 2, 0, 9, 1, 2, 3, 6, 4], [999, 999, 1, 3, 999, 7, 4, 999, 9, 0, 4, 999, 999, 6, 2], [3, 8, 999, 999, 3, 6, 7, 4, 1, 4, 0, 4, 2, 999, 4], [2, 2, 4, 8, 1, 999, 4, 999, 2, 999, 4, 0, 7, 2, 999], [999, 3, 2, 1, 999, 2, 999, 1, 3, 999, 2, 7, 0, 7, 4], [5, 4, 7, 4, 1, 7, 1, 4, 6, 6, 999, 2, 7, 0, 8], [6, 1, 999, 999, 999, 4, 5, 1, 4, 2, 4, 999, 4, 8, 0]];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"negro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Bienvenido a calcular las subredes de una Direccion IP\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \" Cual direccion quieres usar? \"), /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Cuantos nodos usaras?\",\n    name: \"nodos\",\n    onChange: e => formedit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: e => Dijkstra(anchos),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 16\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/diego/projectos/nodos/frontend/src/components/home/Home.js"],"names":["React","useEffect","useState","Input","message","Table","Form","Button","InputNumber","useForm","Home","document","title","agregar","form","formedit","data","setData","columns","setColumns","colu","e","og","empezamos","push","dataIndex","key","render","porfavor","row","index","numeros","parseInt","nodos","crearRow","nod","newData","i","fila","j","console","log","camino","t","v","Dijkstra","w","l","Array","length","r","min","vmin","anchos"],"mappings":"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","sourcesContent":["import React, {useEffect, useState }from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js'\nfunction Home() {\n  document.title = \"Calculadora de Subredes\"\n  const agregar =[]\n  const [form,formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [columns, setColumns] = useState([]);\n\n  const colu = (e, og) =>  {\n    if(og == 0){\n\n\n      setColumns(agregar)\n    }\n    else {\n      let empezamos = 0\n      while(og != empezamos){\n        agregar.push({\n          title: \"Nodo \" + (empezamos+1),\n          dataIndex: \"porfavor\",\n          key: 'ya',\n          render: (porfavor, row, index) => { return <input  type=\"number\"/> }\n        })\n        empezamos++;\n      }\n      setColumns(agregar)\n\n    }\n  }\n\n  const numeros = (e)=>{\n    const numeros = parseInt(form.nodos,10);\n    if(numeros > 0){\n      colu(e,numeros);\n      crearRow(numeros)\n    }\n  }\n\n  const crearRow = (nod) =>{\n    let newData = [];\n    for(let i = 0; i< nod; i++){\n      let fila = {};\n      for(let j = 0; j < nod; j++){\n        fila[\"porfavor\"] = \"3\";\n      }\n      newData.push(fila);\n      console.log(newData)\n    }\n    setData(newData);\n  }\n\n  const camino =  (t,v) =>{\n    if(t[v] != 1) {\n      camino(t,t[v]);\n      console.log(\"- \",t[v]);\n    }\n  }\n\n  const Dijkstra = (w) =>{\n    let l = new Array(w.length+1),t= new Array(w.length+1),r= new Array(w.length+1),min,vmin;\n    for(let i = 2; i<= w.length; i++){\n      l[i] = w[0][i-1];\n      t[i] = 1;\n    }\n    for(let i = 1; i < w.length; i++){\n      min = 999;\n      for(let j = 2; j <= w.length; j++){\n        if( 0 <= l[j] && l[j] <= min){\n          min = l[j];\n          vmin = j;\n        }\n      }\n      for (let j=2; j<= w.length; j++){\n        if (l[vmin]+w[vmin-1][j-1] < l[j]){\n          l[i] = l[vmin]+w[vmin-1][j-1];\n  \t\t\t\tt[i] = vmin;\n        }\n      }\n      r[vmin] = l[vmin];\n      l[vmin] = -1;\n    }\n    console.log( \"\\nCAMINOS MAS CORTOS\\n\") // para desplegar todos los caminos resultantes a partir del nodo 1\n    for (let i = 2; i <= w.length; i++)\n    { console.log(\"de 1 a \",i, \": 1\");\n      camino(t, i);\n      console.log( \"-\", i ,\" cuesta \",r[i],\" unidades\\n\");\n    }\n  }\n\n  let anchos = \t[[0, 2, 3, 2, 999, 4, 5, 2, 9, 999, 3, 2, 999, 5, 6],\n  \t\t\t\t\t\t\t[2, 0, 2, 8, 999, 5, 999, 4, 6, 999, 8, 2, 3, 4, 1],\n  \t\t\t\t\t\t\t[3, 2, 0, 1, 6, 3, 999, 5, 6, 1, 999, 4, 2, 7, 999],\n  \t\t\t\t\t\t\t[2, 8, 1, 0, 1, 6, 1, 3, 3, 3, 999, 8, 1, 4, 999],\n  \t\t\t\t\t\t\t[999, 999, 6, 1, 0, 999, 1, 4, 1, 999, 3, 1, 999, 1, 999],\n  \t\t\t\t\t\t\t[4, 5, 3, 6, 999, 0, 999, 7, 1, 7, 6, 999, 2, 7, 4],\n  \t\t\t\t\t\t\t[5, 999, 999, 1, 1, 999, 0, 4, 1, 4, 7, 4, 999, 1, 5],\n  \t\t\t\t\t\t\t[2, 4, 5, 3, 4, 7, 4, 0, 2, 999, 4, 999, 1, 4, 1],\n  \t\t\t\t\t\t\t[9, 6, 6, 3, 1, 1, 1, 2, 0, 9, 1, 2, 3, 6, 4],\n  \t\t\t\t\t\t\t[999, 999, 1, 3, 999, 7, 4, 999, 9, 0, 4, 999, 999, 6, 2],\n  \t\t\t\t\t\t\t[3, 8, 999, 999, 3, 6, 7, 4, 1, 4, 0, 4, 2, 999, 4],\n  \t\t\t\t\t\t\t[2, 2, 4, 8, 1, 999, 4, 999, 2, 999, 4, 0, 7, 2, 999],\n  \t\t\t\t\t\t\t[999, 3, 2, 1, 999, 2, 999, 1, 3, 999, 2, 7, 0, 7, 4],\n  \t\t\t\t\t\t\t[5, 4, 7, 4, 1, 7, 1, 4, 6, 6, 999, 2, 7, 0, 8],\n  \t\t\t\t\t\t\t[6, 1, 999, 999, 999, 4, 5, 1, 4, 2, 4, 999, 4, 8, 0]];\n\n\n\n  return (\n    <div className=\"negro\">\n      <div className=\"todo\">\n        <h1>Bienvenido a calcular las subredes de una Direccion IP</h1>\n        <h2> Cual direccion quieres usar? </h2>\n        <Form layout = 'vertical'>\n          <Input placeholder = \"Cuantos nodos usaras?\" name=\"nodos\"\n                 onChange={e => formedit(e)}/>\n               <Button type=\"primary\" onClick = {e => Dijkstra(anchos)}  >Submit</Button>\n        </Form>\n        <Table columns={columns} dataSource={data} />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}