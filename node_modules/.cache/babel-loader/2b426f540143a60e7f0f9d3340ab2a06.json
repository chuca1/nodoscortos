{"ast":null,"code":"var _jsxFileName = \"/home/diego/projectos/nodos/frontend/src/components/home/Home.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js';\n\nfunction Home() {\n  document.title = \"Calculadora de Subredes\";\n  const agregar = [];\n  const [form, formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [columns, setColumns] = useState([]);\n\n  const colu = (e, og) => {\n    if (og == 0) {\n      setColumns(agregar);\n    } else {\n      let empezamos = 0;\n\n      while (og != empezamos) {\n        agregar.push({\n          title: \"Nodo \" + (empezamos + 1),\n          dataIndex: \"porfavor\",\n          key: 'ya',\n          render: (porfavor, row, index) => {\n            return /*#__PURE__*/React.createElement(\"input\", {\n              type: \"number\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 24,\n                columnNumber: 54\n              }\n            });\n          }\n        });\n        empezamos++;\n      }\n\n      setColumns(agregar);\n    }\n  };\n\n  const numeros = e => {\n    const numeros = parseInt(form.nodos, 10);\n\n    if (numeros > 0) {\n      colu(e, numeros);\n      crearRow(numeros);\n    }\n  };\n\n  const crearRow = nod => {\n    let newData = [];\n\n    for (let i = 0; i < nod; i++) {\n      let fila = {};\n\n      for (let j = 0; j < nod; j++) {\n        fila[\"porfavor\"] = \"3\";\n      }\n\n      newData.push(fila);\n      console.log(newData);\n    }\n\n    setData(newData);\n  };\n\n  const camino = (t, v) => {\n    if (t[v] != 1) {\n      camino(t, t[v]);\n      console.log(\"- \", t[v]);\n    }\n  };\n\n  const Dijkstra = w => {\n    let l = new Array(w.length() + 1),\n        t = new Array(w.length() + 1),\n        r = new Array(w.length() + 1),\n        min,\n        vmin;\n\n    for (let i = 2; i <= w.length(); i++) {\n      l[i] = w[0][i - 1];\n      t[i] = 1;\n    }\n\n    for (let i = 1; i < w.length(); i++) {\n      min = 999;\n\n      for (let j = 2; j <= w.length(); j++) {\n        if (0 <= l[i] && l[i] <= min) {\n          min = l[i];\n          vmin = i;\n        }\n      }\n\n      for (let j = 2; j <= w.length(); i++) {\n        if (l[vmin] + l[vmin - 1][i - 1] < l[i]) {\n          l[i] = l[vmin] + w[vmin - 1][i - 1];\n          t[i] = vmin;\n        }\n\n        r[vmin] = l[vmin];\n        l[vmin] = -1;\n      }\n    }\n\n    console.log(\"\\nCAMINOS MAS CORTOS\\n\"); // para desplegar todos los caminos resultantes a partir del nodo 1\n\n    for (let i = 2; i <= w.length(); i++) {\n      console.log(\"de 1 a \", i, \": 1\");\n      camino(t, i);\n      console.log(\"-\", i, \" cuesta \", r[i], \" unidades\\n\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"negro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Bienvenido a calcular las subredes de una Direccion IP\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \" Cual direccion quieres usar? \"), /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Cuantos nodos usaras?\",\n    name: \"nodos\",\n    onChange: e => formedit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: e => numeros(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/diego/projectos/nodos/frontend/src/components/home/Home.js"],"names":["React","useEffect","useState","Input","message","Table","Form","Button","InputNumber","useForm","Home","document","title","agregar","form","formedit","data","setData","columns","setColumns","colu","e","og","empezamos","push","dataIndex","key","render","porfavor","row","index","numeros","parseInt","nodos","crearRow","nod","newData","i","fila","j","console","log","camino","t","v","Dijkstra","w","l","Array","length","r","min","vmin"],"mappings":"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","sourcesContent":["import React, {useEffect, useState }from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js'\nfunction Home() {\n  document.title = \"Calculadora de Subredes\"\n  const agregar =[]\n  const [form,formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [columns, setColumns] = useState([]);\n\n  const colu = (e, og) =>  {\n    if(og == 0){\n\n\n      setColumns(agregar)\n    }\n    else {\n      let empezamos = 0\n      while(og != empezamos){\n        agregar.push({\n          title: \"Nodo \" + (empezamos+1),\n          dataIndex: \"porfavor\",\n          key: 'ya',\n          render: (porfavor, row, index) => { return <input  type=\"number\"/> }\n        })\n        empezamos++;\n      }\n      setColumns(agregar)\n\n    }\n  }\n\n  const numeros = (e)=>{\n    const numeros = parseInt(form.nodos,10);\n    if(numeros > 0){\n      colu(e,numeros);\n      crearRow(numeros)\n    }\n  }\n\n  const crearRow = (nod) =>{\n    let newData = [];\n    for(let i = 0; i< nod; i++){\n      let fila = {};\n      for(let j = 0; j < nod; j++){\n        fila[\"porfavor\"] = \"3\";\n      }\n      newData.push(fila);\n      console.log(newData)\n    }\n    setData(newData);\n  }\n\n  const camino =  (t,v) =>{\n    if(t[v] != 1) {\n      camino(t,t[v]);\n      console.log(\"- \",t[v]);\n    }\n  }\n\n  const Dijkstra = (w) =>{\n    let l = new Array(w.length()+1),t= new Array(w.length()+1),r= new Array(w.length()+1),min,vmin;\n    for(let i = 2; i<= w.length(); i++){\n      l[i] = w[0][i-1];\n      t[i] = 1;\n    }\n    for(let i = 1; i < w.length(); i++){\n      min = 999;\n      for(let j = 2; j <= w.length(); j++){\n        if( 0 <= l[i] && l[i] <= min){\n          min = l[i];  vmin = i;\n        }\n      }\n      for (let j=2; j<= w.length(); i++){\n        if (l[vmin]+l[vmin-1][i-1] < l[i]){\n          l[i] = l[vmin]+w[vmin-1][i-1];\n  \t\t\t\tt[i] = vmin;\n        }\n        r[vmin] = l[vmin];\n        l[vmin] = -1;\n      }\n    }\n    console.log( \"\\nCAMINOS MAS CORTOS\\n\") // para desplegar todos los caminos resultantes a partir del nodo 1\n    for (let i = 2; i <= w.length(); i++)\n    { console.log(\"de 1 a \",i, \": 1\");\n      camino(t, i);\n      console.log( \"-\", i ,\" cuesta \",r[i],\" unidades\\n\");\n    }\n  }\n\n\n  return (\n    <div className=\"negro\">\n      <div className=\"todo\">\n        <h1>Bienvenido a calcular las subredes de una Direccion IP</h1>\n        <h2> Cual direccion quieres usar? </h2>\n        <Form layout = 'vertical'>\n          <Input placeholder = \"Cuantos nodos usaras?\" name=\"nodos\"\n                 onChange={e => formedit(e)}/>\n          <Button type=\"primary\" onClick = {e => numeros(e)}  >Submit</Button>\n        </Form>\n        <Table columns={columns} dataSource={data} />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}